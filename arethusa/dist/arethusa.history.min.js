/*
 * Arethusa - a backend-independent client-side annotation framework
 * http://github.com/alpheios-project/arethusa
 *
 * Version 0.2.5
 * built from branch widget
 * at 0a82a2ad9cc7468ea781bfa023a1dddbd77130c6
 * on 2020-12-07T15:20:56.224Z
 *
 * Published under the MIT license
 */

"use strict";angular.module("arethusa.history",[]),angular.module("arethusa.history").directive("histRedo",["generator","history","translator",function(a,b,c){return a.historyTrigger(b,c,"redo","repeat")}]),angular.module("arethusa.history").directive("histUndo",["generator","history","translator",function(a,b,c){return a.historyTrigger(b,c,"undo")}]),angular.module("arethusa.history").directive("historyBatch",function(){return{restrict:"A",scope:{batch:"=historyBatch"},link:function(a,b,c){a.events=a.batch.events},templateUrl:"js/arethusa.history/templates/history_batch.html"}}),angular.module("arethusa.history").directive("historyEvent",["idHandler","$compile",function(a,b){return{restrict:"A",scope:{event:"=historyEvent"},link:function(c,d,e){function f(a){return a&&"object"==typeof a&&(c.blocked=!0),a||"nothing"}c.token=c.event.token,c.id=c.token.id,c.type=c.event.type,c.trslKey={start:"history."+c.type+".start",end:"history."+c.type+".end"},"change"===c.type&&(c.blocked=!1,c.property=c.event.property,c.oldVal=f(c.event.oldVal),c.newVal=f(c.event.newVal)),c.formatId=function(b){return a.formatId(b,"%w")},d.find("#token").append(b('          <span            class="text"            token="token"            colorize="true"            click="true"            hover="true">          </span>        ')(c))},templateUrl:"js/arethusa.history/templates/history_event.html"}}]),angular.module("arethusa.history").directive("historyList",["history","$compile",function(a,b){return{restrict:"A",scope:{},link:function(b,c,d){b.history=a,b.events=a.events,b.$watch("history.position",function(a,c){b.position=a})},templateUrl:"js/arethusa.history/templates/history_list.html"}}]),angular.module("arethusa.history").service("history",["configurator","keyCapture","state","translator","notifier",function(a,b,c,d,e){function f(){a.getConfAndDelegate(l),l.maxSize=l.maxSize||50}function g(a){c.doSilent(a),i()}function h(){return l.events[l.position]}function i(){var a=l.events.length>0;l.canUndo=a&&l.position<l.events.length,l.canRedo=a&&l.position>0}function j(a,b){var d=a.id;this.token=a,this.type=b,this.time=new Date,"add"===b?(this.exec=function(){c.addToken(a,d)},this.undo=function(){c.removeToken(d)}):(this.exec=function(){c.removeToken(d)},this.undo=function(){c.addToken(a,d)})}function k(){function a(){angular.forEach(d.events,function(a,b){a.exec()})}function b(){angular.forEach(d.events,function(a,b){a.undo()})}var d=this;this.events=[],this.type="batch",this.push=function(a){d.events.push(a)},this.count=function(){return d.events.length},this.pop=function(){return d.events.pop()},this.exec=function(){c.doBatched(a)},this.undo=function(){c.doBatched(b)}}var l=this;this.name="history";var m=d({"history.undoSuccess":"undoSuccess","history.redoSuccess":"redoSuccess"});this.undo=function(){l.canUndo&&(g(function(){h().undo(),l.position++}),e.success(m.undoSuccess()))},this.redo=function(){l.canRedo&&(g(function(){l.position--,h().exec()}),e.success(m.redoSuccess()))};var n=new k;this.saveEvent=function(a){if(!c.silent){if(c.batchChange)return void n.push(a);var b=l.events;b.length===l.maxSize&&b.pop(),b.splice(0,l.position),l.position=0,b.unshift(a),i()}},c.watch("*",function(a,b,c){l.saveEvent(c)}),c.on("tokenAdded",function(a,b){var c=new j(b,"add");l.saveEvent(c)}),c.on("tokenRemoved",function(a,b){var c=new j(b,"remove");l.saveEvent(c)}),c.on("batchChangeStop",function(){if(!c.silent){var a=1===n.count()?n.pop():n;l.saveEvent(a),n=new k}});var o=b.initCaptures(function(a){return{history:[a.create("undo",l.undo,":"),a.create("redo",l.redo,"'")]}});l.activeKeys=angular.extend({},o.history),this.init=function(){f(),l.canRedo=!1,l.canUndo=!1,l.events=[],l.position=0}}]),angular.module("arethusa.history").run(["$templateCache",function(a){a.put("js/arethusa.history/templates/history_batch.html",'<span ng-repeat="e in events" history-event="e"/>\n'),a.put("js/arethusa.history/templates/history_event.html",'<div>\n  <span\n    translate="{{ trslKey.start }}"\n    translate-value-property="{{ property }}">\n  </span>\n  <span id="token"/>\n  <sup class="note"> {{ formatId(id) }} </sup>\n  <span\n    translate="{{ trslKey.end }}"\n    translate-value-property="{{ property }}">\n  </span>\n  <span ng-if="type === \'change\' && !blocked">\n    <span\n      translate="history.fromTo"\n      translate-value-from="{{ oldVal }}"\n      translate-value-to="{{ newVal }}">\n    </span>\n  </span>\n</div>\n'),a.put("js/arethusa.history/templates/history_list.html",'<div class="small-12 columns">\n  <ol reversed>\n    <p ng-if="events.length === 0" class="text">\n      <span translate="history.noRecords"/>\n    </p>\n    <li\n      ng-repeat="e in events"\n      ng-class="{ \'current-hist-event\': $index === position }"\n      class="text hist-event">\n      <span ng-switch="e.type" >\n        <span ng-switch-when="batch" history-batch="e"/>\n        <span ng-switch-default history-event="e"/>\n      </span>\n    </li>\n  </ol>\n</div>\n')}]);
//# sourceMappingURL=arethusa.history.min.map