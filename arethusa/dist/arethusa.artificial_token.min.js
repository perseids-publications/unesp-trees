/*
 * Arethusa - a backend-independent client-side annotation framework
 * http://github.com/alpheios-project/arethusa
 *
 * Version 0.2.5
 * built from branch widget
 * at 0a82a2ad9cc7468ea781bfa023a1dddbd77130c6
 * on 2020-12-07T15:20:56.224Z
 *
 * Published under the MIT license
 */

"use strict";angular.module("arethusa.artificialToken",[]),angular.module("arethusa.artificialToken").directive("artificialTokenInsertionPointer",["artificialToken","state","translator",function(a,b,c){return{restrict:"A",scope:{},link:function(d,e,f){function g(a){return function(b){p[a]=b(),h()}}function h(){var a=d.aT.insertBehind?"behind":"inFront";d.insertDirText=p[a],d.insertDirHint=p[a+"Hint"],d.arrow=d.aT.insertBehind?"right":"left"}function i(){return angular.element("[token]")}function j(){m=!1,i().removeClass(o),n()}function k(c){a.model.insertionPoint=b.getToken(c)}function l(){n=d.$watchCollection("state.selectedTokens",function(a,c){for(var d in a)if("click"===a[d]){k(d),b.deselectAll(),j();break}},!0)}var m,n,o="crosshair-cursor";d.aT=a;var p={};c("aT.insertBehind",g("behind")),c("aT.insertInFront",g("inFront")),c("aT.insertBehindHint",g("behindHint")),c("aT.insertInFrontHint",g("inFrontHint")),d.state=b,d.enterSelectMode=function(){m=!0,b.deselectAll(),i().addClass(o),l()},d.toggleDir=function(){d.aT.insertBehind=!d.aT.insertBehind,h()},d.$watch("aT.model.insertionPoint",function(a,b){d.insertionPoint=a}),d.$watch("aT.insertBehind",h),h()},templateUrl:"js/arethusa.artificial_token/templates/artificial_token_insertion_pointer.html"}}]),angular.module("arethusa.artificialToken").directive("artificialTokenEdit",["artificialToken","state","$timeout",function(a,b,c){return{restrict:"A",scope:{token:"=artificialTokenEdit"},link:function(d,e,f){d.aT=a,d.string=d.token.string,d.type=d.token.type,d.changeType=function(){b.change(d.token.id,"type",d.type)};var g;d.changeString=function(){g&&c.cancel(g),g=c(function(){b.change(d.token.id,"string",d.string)},500)}},templateUrl:"js/arethusa.artificial_token/templates/artificial_token_edit.html"}}]),angular.module("arethusa.artificialToken").directive("artificialTokenList",["artificialToken","idHandler",function(a,b){return{restrict:"A",scope:!0,link:function(c,d,e){c.aT=a,c.formatId=function(a){return b.formatId(a,"%s-%w")}},templateUrl:"js/arethusa.artificial_token/templates/artificial_token_list.html"}}]),angular.module("arethusa.artificialToken").service("artificialToken",["state","configurator","idHandler","commons",function(a,b,c,d){function e(){b.getConfAndDelegate(q,r),q.createdTokens={},q.count=0,delete q.mode,g()}function f(){if(!q.model.insertionPoint){var b=aU.last(Object.keys(a.tokens).sort()),d=c.stripExtension(b);q.model.insertionPoint=a.getToken(d),q.insertBehind=!0}}function g(){q.model=new h,q.defaultInsertionPoint&&f()}function h(a,b){this.string=a,this.type=b||"elliptic",this.artificial=!0,this.idMap=new c.Map}function i(){q.model.string||(q.model.string="["+s+"]",s++)}function j(){var a=arethusaUtil.inject([],q.createdTokens,function(a,b,c){var d=/\[(\d+)\]/.exec(c.string);d&&a.push(d[1])}).sort();s=0===a.length?0:parseInt(a[a.length-1])+1}function k(){q.count=Object.keys(q.createdTokens).length}function l(){angular.forEach(a.tokens,function(a,b){a.artificial&&m(b,a)})}function m(a,b){q.createdTokens[a]=b,k()}function n(a){delete q.createdTokens[a],k()}function o(a){for(var b=Object.keys(q.createdTokens);arethusaUtil.isIncluded(b,a);)a=c.increment(a);return a}function p(){if(q.insertBehind){var a=q.model.insertionPoint;if(a.terminator)q.model.terminator=!0,a.terminator=!1;else{var b=q.createdTokens[c.decrement(q.model.id)];b&&(q.model.terminator=!0,b.terminator=!1)}}}var q=this;this.name="artificialToken";var r=["defaultInsertionPoint"];this.defaultConf={displayName:"aT"},this.supportedTypes=["elliptic"],this.setType=function(a){q.model.type=a},this.hasType=function(a){return q.model.type===a},this.toggleMode=function(a){q.mode===a?delete q.mode:q.mode=a};var s;this.modelValid=function(){return q.model.type&&q.model.insertionPoint},this.removeToken=a.removeToken,this.insertBehind=!1,this.propagateToState=function(){i();var b=q.model.insertionPoint,d=b.id,e=q.insertBehind?d:c.decrement(d);c.isExtendedId(d)||(e=c.extendId(e)),e=o(e),q.model.id=e,q.model.sentenceId=b.sentenceId,p(),a.addToken(q.model,e),g()},a.on("tokenAdded",function(a,b){m(b.id,b)}),a.on("tokenRemoved",function(a,b){n(b.id)}),this.settings=[{directive:"artificial-token-toggle"},d.setting("Activate default insertion point","defaultInsertionPoint",f)],this.init=function(){e(),l(),j()}}]),angular.module("arethusa.artificialToken").run(["$templateCache",function(a){a.put("js/arethusa.artificial_token/templates/artificial_token.html",'<div class="small-12 columns text-center">\n  <span\n    class="button tiny radius"\n    ng-click="plugin.toggleMode(\'create\')">\n    <span translate="create"/>\n  </span>\n  <span\n    class="button tiny radius"\n    ng-click="plugin.toggleMode(\'list\')">\n    <span translate="list"/>\n  </span>\n  <div delimiter/>\n  <div ng-if="plugin.mode === \'create\'">\n    <form name="cAT">\n      <label>\n        <span translate="aT.visualRepresentation"/>\n        <input\n          type="text"\n          foreign-keys\n          ng-model="plugin.model.string"/>\n      </label>\n      <div class="text-left">\n        <select\n          class="compact"\n          required\n          ng-model="plugin.model.type"\n          ng-options="type for type in plugin.supportedTypes">\n        </select>\n      </div>\n      <span artificial-token-insertion-pointer/>\n      <div delimiter/>\n    </form>\n    <button\n      class="tiny radius"\n      ng-disabled="!plugin.modelValid()"\n      ng-click="plugin.propagateToState()">\n      <span translate="aT.addToken"/>\n    </button>\n  </div>\n  <div\n    ng-if="plugin.mode === \'list\'"\n    artificial-token-list>\n  </div>\n</div>\n'),a.put("js/arethusa.artificial_token/templates/artificial_token_edit.html",'<input foreign-keys type="text" ng-change="changeString()" ng-model="string"/>\n<select\n  class="compact"\n  required\n  ng-model="type"\n  ng-change="changeType()"\n  ng-options="opt for opt in aT.supportedTypes">\n</select>\n'),a.put("js/arethusa.artificial_token/templates/artificial_token_insertion_pointer.html",'<div class="small-12 columns">\n  <label>\n    <span translate="aT.insertionPoint"/>\n    <div class="small-panel row text-left">\n      <span ng-if="!insertionPoint">-</span>\n      <span ng-if=" insertionPoint">\n        <span>{{ insertDirText }}</span>\n        <span\n          token-with-id\n          value="insertionPoint.string"\n          token-id="insertionPoint.id">\n        </span>\n      </span>\n      <span class="right">\n        <span\n          ng-click="enterSelectMode()"\n          class="button micro radius">\n          <i class="fa fa-crosshairs rotate-on-hover"></i>\n        </span>\n        <span class="button micro radius"\n          ng-click="toggleDir()"\n          title="{{ insertDirHint }}">\n          <i class="fa fa-arrow-{{ arrow }}"></i>\n        </span>\n      </span>\n    </div>\n  </label>\n</div>\n'),a.put("js/arethusa.artificial_token/templates/artificial_token_list.html",'<p\n  ng-if="aT.count === 0"\n  class="text"\n  style="margin-left: 0.75rem">\n  <span translate="aT.noArtTokensPresent"/>\n</p>\n\n<div class="panel" ng-repeat="(id, token) in aT.createdTokens">\n  <div>\n    <span class="left">\n      <span\n        class="normal-size"\n        token="token"\n        colorize="true"\n        click="true"\n        hover="true">\n      </span>\n      <sup\n        class="note">\n        {{ formatId(id) }}\n      </sup>\n    </span>\n    <span class="right">\n      <span\n        ng-click="aT.removeToken(id)"\n        class="button tiny radius">\n        <span translate="delete"/>\n      </span>\n    </span>\n  </div>\n\n  <div artificial-token-edit="token"/>\n</div>\n')}]);
//# sourceMappingURL=arethusa.artificial_token.min.map